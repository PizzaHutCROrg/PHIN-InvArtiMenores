
@model InventarioArtMenores.Models.HistoMovEnca


<h5>Registro de Movimientos</h5>

@{
    var descripcion = Session["desResArti"].ToString();
}
<label><strong style="font-size: 1.3em">@descripcion</strong></label>
<hr />

@*@using (Html.BeginForm("Index", "RegistroMov", FormMethod.Post, new { id = "miForm", @class = "container mt-4" }))
    {*@
@*@Html.AntiForgeryToken()*@

<!-- Contenedor para mostrar mensajes de éxito o error -->
<div id="mensajeAlerta" class="alert alert-dismissible fade show" role="alert" style="display: none;">
    <span id="mensajeTexto"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>


<!-- El formulario -->
<form id="ordenCompraForm" class="container mt-4">
    <div id="overlay" style="display:none;">
        <div id="spinner" class="spinner">
            <img src="~/assets/img/loading.gif" alt="Cargando..." />
        </div>
    </div>
    @if (ViewBag.Estado == "cerrado")
    {
        <div class="row mb-3">
            <div class="col-md-3">
                @*<div class="text-center">*@
                <button type="submit" class="btn btn-color font-weight-bold" id="btnGuardar">Guardar</button>
                <button type="submit" class="btn btn-color font-weight-bold" id="btnLimpiar">Limpiar</button>
                @*</div>*@
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-3">
                <label for="TipoMov">Tipo Movimiento:</label>
                <div class="col-md-10">
                    <select id="cbxTipoMov" name="cbxTipoMov" class="form-control" required="required">
                        <option value="">--Seleccione--</option>
                        @foreach (var option in ViewBag.OptionsTipo as SelectList)
                        {
                            <option value="@option.Value">@option.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <label for="Motivo">Motivo:</label>
                <div class="col-md-10">
                    <textarea id="txtMotivo" name="txtMotivo" maxlength="98"></textarea>
                    <span id="errorMotivo" class="text-danger" style="display:none;">El campo Motivo es obligatorio cuando el tipo es una Salida.</span>
                </div>
            </div>
            @*depende de la selección muestra los div´s *@
            <div class="col-md-3" id="divNumDoc" hidden>
                <label class="control-label" for="NumDoc">Número de documento:</label>
                <input type="text" id="txtNumDoc" name="txtNumDoc" asp-for="NumDoc" maxlength="48" class="form-control" required="required" />
            </div>
            <div class="col-md-3" id="divProveedor" hidden>
                <div class="table-responsive">
                    <table>
                        <tr>
                            <td><label class="control-label col-md-2" for="Proveedor">Proveedor:</label></td>
                        </tr>
                        <tr>
                            <td>
                                <select id="txtProv" name="txtProv" class="form-control" required="required">
                                    <option value="">-------Seleccione--------</option>
                                    @foreach (var option in ViewBag.Prov as SelectList)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                </select>
                            </td>
                        </tr>
                    </table>
                </div>
                    <!--<label class="control-label col-md-2" for="Proveedor">Proveedor:</label>-->
                    @*<input type="text" id="txtProv" name="txtProv" maxlength="100" asp-for="Proveedor" class="form-control" required="required" />*@
                    <!--<select id="txtProv" name="txtProv" class="form-control" required="required">
            <option value="">---Seleccione---</option>
            <option value="Mayca">Mayca</option>
            <option value="Coca Cola">Coca Cola</option>
            <option value="Otro">Otro</option>
        </select>-->



                </div>
                <div class="col-md-3" id="divResponsable" hidden>
                    <label class="control-label col-md-2" for="Responsable">Responsable:</label>
                    <input type="text" id="txtResponsable" name="txtResponsable" maxlength="50" class="form-control" required="required" />
                </div>
                <div class="col-md-3" id="divCbxRest" hidden>
                    <div class="table-responsive">
                        <table>
                            <tr>
                                <td><label class="control-label col-md-2" for="Proveedor">Proveedor:</label></td>
                            </tr>
                            <tr>
                                <td>
                                    <select id="cbxRestaurante" name="cbxRestaurante" class="form-control" required="required">
                                        <option value="">-------Seleccione--------</option>
                                        @foreach (var option in ViewBag.Tiendas as SelectList)
                                        {
                                            <option value="@option.Value">@option.Text</option>
                                        }
                                    </select>
                                    <span id="errorcbxRest" class="text-danger" style="display:none;">Seleccione un restaurante.</span>
                                </td>
                            </tr>
                        </table>
                    </div>
                    @*<label class="control-label col-md-2" for="Proveedor">Proveedor:</label>
            <select id="cbxRestaurante" name="cbxRestaurante" class="form-control" required="required">
                <option value="">-------Seleccione--------</option>
                @foreach (var option in ViewBag.Tiendas as SelectList)
                {
                    <option value="@option.Value">@option.Text</option>
                }
            </select>
            <span id="errorcbxRest" class="text-danger" style="display:none;">Seleccione un restaurante.</span>*@
                </div>
            </div>
        <hr />
        <div class="row mb-4">
            <h6 class="mb-2">Agregar Artículos</h6>
            <!-- Campo para seleccionar Artículo -->
            <div class="col-md-3">
                <label class="form-label">Artículo:</label>
                <select id="cbxArti" name="cbxArti" class="form-control">
                    @*form-select select2*@
                    <option value="" disabled selected>--Seleccione--</option>
                    @foreach (var option in ViewBag.OptionsList as List<string>)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
                <span id="errorMonto3" class="text-danger" style="display:none;">Por favor, seleccione un artículo.</span>
            </div>


            <div class="col-md-3">
                <label>Cantidad:</label>
                <input type="number" min="0" id="txtCantidad" name="Cantidad" class="form-control" />@*step="0.0001"*@
                <span id="errorMonto2" class="text-danger" style="display:none;">Por favor, ingrese un número válido (entero o con decimales).</span>
            </div>

            <div class="col-md-3">
                <label>Costo por Unidad:</label>
                <input type="text" id="txtCosto" name="Costo" class="form-control" />@*min="0"*@
                <!--<input type="text" id="txtCosto2" name="Costo" class="form-control" />-->@*min="0"*@
                @*<input type="text" id="input-number"  class="form-control"/>*@
                <span id="errorMonto" class="text-danger" style="display:none;">Por favor, ingrese un número válido (entero o con decimales).</span>
            </div>
            <!-- Botón para agregar artículo -->
            <div class="col-md-3">
                <p></p>
                <button type="button" class="btn btn-primary" id="agregarArticulo">Agregar Artículo</button>
            </div>
            @*<div class="col-md-12 mt-3">
                    <button type="button" class="btn btn-primary" id="agregarArticulo">Agregar Artículo</button>
                </div>*@
        </div>


        //******Tabla con los artículos*******

        <h6>Artículos Agregados</h6>
        <div class="alert alert-info" role="alert" style="width: fit-content;">
            <label for="totalMonto">Total Monto: </label>
            <span id="totalMonto" class="font-weight-bold">0.00</span>
        </div>
        <div class="table-responsive">
            <table class="table table-bordered table-striped mt-3" id="detalleArticulos">
                <thead class="table-light">
                    <tr>
                        <th>línea</th>
                        <th>Artículo</th>
                        <th>Cantidad</th>
                        <th>Costo</th>
                        <th>Monto</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Los artículos se mostrarán aquí -->

                </tbody>
            </table>
        </div>
        <br />
        <br />

    }
    @if (TempData["Message2"] != null)
    {
        <div class="alert alert-primary alert-dismissible fade show" role="alert" style="width: fit-content;">
            <strong>@TempData["Message2"]</strong>

        </div>
    }
</form>
@*}*@



<script>
    // $(document).ready(function () {
    // Lista donde guardaremos temporalmente los detalles
    var detalles = [];
    let totalMonto = 0;  // Inicializamos el total en 0
    $.noConflict();
    jQuery(document).ready(function ($) {
        $('#cbxArti').select2({
            placeholder: "--Seleccione--",
            allowClear: true,
            minimumResultsForSearch: 0 // Permite la búsqueda en cualquier caso.
        });
        $('#cbxRestaurante').select2({
            placeholder: "-------Seleccione--------",
            allowClear: true,
            minimumResultsForSearch: 0 // Permite la búsqueda en cualquier caso.
        });
        //txtProv
        $('#txtProv').select2({
            placeholder: "-------Seleccione--------",
            allowClear: true,
            minimumResultsForSearch: 0 // Permite la búsqueda en cualquier caso.
        });

        //dar formato de decimales y miles al costo que ingresa el usuario
        document.getElementById('txtCosto').addEventListener('input', function (event) {
            let value = this.value;
            const decimalSeparator = '.';
            const thousandSeparator = ',';

            // Verificamos si ya existe un punto decimal
            let hasDecimal = value.includes(decimalSeparator);

            // Dividimos la parte entera y decimal
            let [integerPart, decimalPart] = value.split(decimalSeparator);

            // Eliminamos cualquier carácter no numérico en la parte entera
            integerPart = integerPart.replace(/\D+/g, '');

            // Si existe una parte decimal, eliminamos cualquier carácter no numérico
            if (hasDecimal && decimalPart) {
                decimalPart = decimalPart.replace(/\D+/g, '');
            }

            // Añadimos separadores de miles a la parte entera
            let integerPartFormatted = '';
            for (let i = integerPart.length - 1, counter = 0; i >= 0; i--, counter++) {
                if (counter > 0 && counter % 3 === 0) {
                    integerPartFormatted = thousandSeparator + integerPartFormatted;
                }
                integerPartFormatted = integerPart[i] + integerPartFormatted;
            }

            // Si el usuario ha ingresado un punto decimal, preservamos la parte decimal
            if (hasDecimal) {
                this.value = decimalPart ? integerPartFormatted + decimalSeparator + decimalPart : integerPartFormatted + decimalSeparator;
            } else {
                this.value = integerPartFormatted;
            }
        });
        // Prevenir el envío solo si se está en un input y no en un botón de submit
        $('#ordenCompraForm input').on('keydown', function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); // Prevenir el envío del formulario
                return false;
            }
        });

        // Escuchar cambios en el campo Tipo
        $('#cbxTipoMov').change(function () {
            var tipoFiltro = $("#cbxTipoMov").val();
            let listaTipoFiltro = tipoFiltro.split("-");
            if (listaTipoFiltro[0] === '3') {//cuando sea salida debe validar el campo de motivo
                // Deshabilitar campos Monto y Costo cuando se selecciona 'Salida'
                // $('#Monto').prop('disabled', true);
                $('#txtCosto').prop('disabled', true);
                $('#divResponsable').prop('hidden', false);
            } else {
                // Habilitar campos Monto y Costo si es 'Entrada'
                // $('#Monto').prop('disabled', false);
                $('#txtCosto').prop('disabled', false);
            }
            //cambio form v3
            switch (listaTipoFiltro[1]) {
                case "8"://compras
                    $('#divNumDoc').prop('hidden', false);
                    $('#divProveedor').prop('hidden', false);
                    //ocultar
                    $('#divCbxRest').prop('hidden', true);
                    $('#divResponsable').prop('hidden', true);
                    break;
                case "3": //traslado-entrada
                    $('#divCbxRest').prop('hidden', false);
                    //ocultar
                    $('#divNumDoc').prop('hidden', true);
                    $('#divProveedor').prop('hidden', true);
                    $('#divResponsable').prop('hidden', true);
                    break;
                case "4"://traslado-salida
                    $('#divCbxRest').prop('hidden', false);
                    //ocultar
                    $('#divNumDoc').prop('hidden', true);
                    $('#divProveedor').prop('hidden', true);
                    $('#divResponsable').prop('hidden', true);
                    break;
                case "9"://desecho
                    $('#divResponsable').prop('hidden', false);
                    //ocultar
                    $('#divNumDoc').prop('hidden', true);
                    $('#divProveedor').prop('hidden', true);
                    $('#divCbxRest').prop('hidden', true);

                    break;
                default:
                    console.log("");
            }


        });

        //btnLimpiar
        $('#btnLimpiar').click(function (e) {
            // Evitar que el formulario se envíe inmediatamente
            e.preventDefault();
            // Limpiar el formulario después de un éxito
            reiniciarFormulario();
            habilitarEncabezado();

        });

        $('#btnGuardar').click(function (e) {
            // Evitar que el formulario se envíe inmediatamente
            e.preventDefault();
            // Validar campos requeridos
            var isValid = true;
            var errorMotivo = document.getElementById('errorMotivo');
            $(this).find('[required]').each(function () {
                if ($(this).val() === '') {
                    isValid = false;
                    $(this).addClass('is-invalid'); // Agregar clase de Bootstrap para resaltar el campo
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
            var tipoFiltro = $("#cbxTipoMov").val();
            let listaTipoFiltro = tipoFiltro.split("-");
            var txtMotivo = $("#txtMotivo").val();
            if (listaTipoFiltro[0] === '3' && txtMotivo.trim() === '') {//cuando sea salida debe validar el campo de motivo
                e.preventDefault(); // Evita el envío del formulario
                $('#txtMotivo').addClass('is-invalid'); // Marca el campo como inválido

                errorMotivo.style.display = 'block'; // Mostrar mensaje de error
                // $('</br> <span class="text-danger">El campo Motivo es obligatorio cuando es una Salida.</span>').insertAfter('#txtMotivo');
                isValid = false;
            } else {
                $('#txtMotivo').removeClass('is-invalid');
                errorMotivo.style.display = 'none'; // Ocultar mensaje de error si es válido
            }
            // console.log("Tipo: ", listaTipoFiltro);
            // console.log("Tipo: ", listaTipoFiltro[0]);
            // console.log("Tipo: ", tipoFiltro);
            //  console.log("Lista: ", detalles);

            // Si todos los campos son válidos, mostrar el spinner y enviar el formulario
            if (isValid) {
                $('#btnEnviar').prop('disabled', true); // Deshabilitar el botón para evitar múltiples envíos
                // Mostrar el overlay y el spinner
                $("#overlay").show();
                // this.submit(); // Enviar el formulario

                //sin el cambio al form v2
                /* var numeroOrden = $('#txtNumDoc').val();
                 var proveedor = $('#txtProv').val();
                 var cbxTipoMov = $("#cbxTipoMov").val();*/
                //var proveedor = $('#txtProv').val();

                //con cambio al form v3
                var numeroOrden = "0";
                var proveedor = "0";
                var cbxTipoMov = $("#cbxTipoMov").val();
                var responsable = "";

                switch (listaTipoFiltro[1]) {
                    case "8"://compras
                        numeroOrden = $('#txtNumDoc').val();
                        proveedor = $('#txtProv option:selected').text();     //$('#txtProv').val();
                        break;
                    case "3": //traslado-entrada
                        proveedor = $('#cbxRestaurante option:selected').text();
                        break;
                    case "4"://traslado-salida
                        proveedor = $('#cbxRestaurante option:selected').text();
                        break;
                    case "9"://desecho
                        responsable = $('#txtResponsable').val();
                        break;
                    default:
                        console.log("");
                }

                //console.log("Tipo2: ", cbxTipoMov);

                if (numeroOrden && proveedor && detalles.length > 0) {
                    // Enviar los datos al servidor con AJAX
                    $.ajax({
                        type: 'POST',
                        url: '/RegistroMov/Index',
                        data: JSON.stringify({
                            NumDoc: numeroOrden,
                            Proveedor: proveedor,
                            Motivo: txtMotivo,
                            TipoMov: cbxTipoMov,
                            Detalles: detalles,
                            Responsable: responsable
                        }),
                        contentType: 'application/json',
                        success: function (response) {
                            // window.location.href = "/RegistroMov/Index";
                            // Evaluar si la respuesta es exitosa o no
                            if (response.success) {
                                $("#overlay").hide();                               
                                // Limpiar el formulario después de un éxito
                                reiniciarFormulario();
                                habilitarEncabezado();
                                mostrarMensaje('Se registró el movimiento', 'success'); // Mostrar mensaje satisfactorio
                            } else {
                                $("#overlay").hide();
                                mostrarMensaje(response.message, 'danger');  // Mostrar mensaje de error
                            }
                        },
                        error: function (xhr, status, error) {
                            $("#overlay").hide();
                            mostrarMensaje('Error de red o servidor. Intente de nuevo.', 'danger');
                           // return;
                        }
                    });
                } else {
                    $("#overlay").hide();
                    //alert("Complete todos los campos del encabezado y agregue al menos un artículo.");
                    mostrarMensaje('Complete todos los campos y agregue al menos un artículo.', 'warning');
                    return;
                    //  $('</br> <span class="text-danger">Complete todos los campos y agregue al menos un artículo.</span>').insertAfter('#txtMotivo');
                }
            }
        });//fin btnGuardar

        // Función para mostrar mensajes personalizados en el div de alerta
        function mostrarMensaje(mensaje, tipo) {
            // console.log("Mostrar Mensaje", mensaje, tipo);
            var alertClass = 'alert-' + tipo; // Ejemplo: 'alert-success', 'alert-danger', etc.

            // Reiniciar el mensaje
            $('#mensajeAlerta').removeClass('alert-success alert-danger alert-warning alert-primary')
                .addClass(alertClass)        // Agregar la clase según el tipo de alerta
                .show();                     // Mostrar el div de alerta

            $('#mensajeTexto').text(mensaje); // Actualizar el texto del mensaje

            // Asegurarse de que la alerta se oculta automáticamente después de 5 segundos
            setTimeout(function () {
                $('#mensajeAlerta').fadeOut();
            }, 5000); // 5000 milisegundos = 5 segundos
        }
        // Función para reiniciar el formulario después de un éxito
        function reiniciarFormulario() {
            // Limpiar todos los campos de texto
            $('#ordenCompraForm')[0].reset();

            // Limpiar la tabla de detalles de artículos
            detalles = [];
            actualizarTabla();

            // Reiniciar selects a su estado predeterminado (eliminar selección)
            // $('#cbxArti').val('').trigger('change');
            $('#cbxArti').val(null).trigger('change');  // Restablecer el select usando Select2
            $('#cbxRestaurante').val(null).trigger('change');  // Restablecer el select usando Select2
            $('#txtProv').val(null).trigger('change');  // Restablecer el select usando Select2
            //ocultar msj
            var errorMonto = document.getElementById('errorMonto');
            var errorMonto2 = document.getElementById('errorMonto2');
            var errorMonto3 = document.getElementById('errorMonto3');
            errorMonto.style.display = 'none'; // Ocultar mensaje de error si es válido
            errorMonto2.style.display = 'none'; // Ocultar mensaje de error si es válido
            errorMonto3.style.display = 'none'; // Ocultar mensaje de error si es válido
            $('#txtCosto').prop('disabled', false);
            $('#totalMonto').text(0);  // Actualizar el span con el total formateado
            totalMonto = 0;
        }

        // Función para validar que sea un número entero o decimal
        function validarNumero(valor) {
            // Expresión regular para validar enteros o decimales (con máximo 4 decimales)
            var regex = /^\d+(\.\d{1,4})?$/;
            return regex.test(valor);
        }

        // Escuchar cambios en el input para validar en tiempo real
        document.getElementById('txtCantidad').addEventListener('input', function (event) {
            var valor = event.target.value;

            // Validar que sea un número válido mientras escribe
            if (!validarNumero(valor) && valor !== '') {
                event.target.value = valor.slice(0, -1); // Eliminar el último carácter si es inválido
            }
        });
        // Escuchar cambios en el input para validar en tiempo real  //evitar negativos
        /*  document.getElementById('txtCosto').addEventListener('input', function (event) {
              var valor = event.target.value;

              // Validar que sea un número válido mientras escribe
              if (!validarNumero(valor) && valor !== '') {
                  event.target.value = valor.slice(0, -1); // Eliminar el último carácter si es inválido
              }
          });
          */


        //*******Manejo de tabla*********** */

        $('#agregarArticulo').click(function (e) {

            if (ValidarEncabezado()) {
                // Obtén los valores del formulario
                var codigo = $('#cbxArti option:selected').text();
                var cantidad = $('#txtCantidad').val();
                var costo = $('#txtCosto').val();
                var tipo = $('#cbxTipoMov').val();//obtener el tipo de mov
                var monto = 0;

                // console.log("costo: ", costo)
                //   console.log("01CBXARTI: ", codigo);

                costo = obtenerValorLimpio(costo); //document.getElementById('Costo')
                //  console.log('Valor limpio:', costo);  // Aquí el valor sin comas

                let listaTipoFiltro = tipo.split("-");//idcategoria-tipoMov
                var txtMotivo = $("#txtMotivo").val();
                $('#txtMotivo').removeClass('is-invalid');

                //  var monto = document.getElementById('monto').value;
                var errorMonto = document.getElementById('errorMonto');
                var errorMonto2 = document.getElementById('errorMonto2');
                var errorMonto3 = document.getElementById('errorMonto3');

                if (listaTipoFiltro[0] === '2') {//entrada
                    // Validar el valor del monto
                    if (!validarNumero(costo)) {
                        e.preventDefault(); // Detener el envío del formulario si no es válido
                        errorMonto.style.display = 'block'; // Mostrar mensaje de error
                    } else {
                        errorMonto.style.display = 'none'; // Ocultar mensaje de error si es válido
                    }
                } else {
                    costo = 1;
                }
                //validar la cantidad
                if (!validarNumero(cantidad)) {
                    e.preventDefault(); // Detener el envío del formulario si no es válido
                    errorMonto2.style.display = 'block'; // Mostrar mensaje de error
                } else {
                    errorMonto2.style.display = 'none'; // Ocultar mensaje de error si es válido
                }
                if (codigo === '--Seleccione--') {
                    e.preventDefault(); // Detener el envío del formulario si no es válido
                    errorMonto3.style.display = 'block'; // Mostrar mensaje de error
                    codigo = "";
                    // console.log("02CBXARTI: ", codigo);
                } else {
                    errorMonto3.style.display = 'none'; // Ocultar mensaje de error si es válido
                }


                if (codigo && cantidad && costo) {
                    //Si el tipo es 'Salida', obtener el monto calculado automáticamente de la base de datos
                    if (listaTipoFiltro[0] === '3') {//salida
                        obtenerMontoCalculado(codigo, cantidad, function (costoCalculado, montoCalculado) {
                            // console.log("MontoCalculado: ", montoCalculado);
                            costo = costoCalculado;
                            monto = montoCalculado;
                            // let monto = montoCalculado;
                            agregarDetalle(codigo, cantidad, costo, monto);
                            // Sumar el monto al total
                            totalMonto += monto;
                            //  console.log("1. totalMonto: ", totalMonto , "  monto:",monto);
                            actualizarTotal();  // Actualizamos el label con el nuevo total
                        });
                    } else {
                        // Valida que los valores sean números válidos
                        //  if (!isNaN(cantidad) && !isNaN(costo)) {
                        let monto = cantidad * costo;  // Calculamos el monto
                        // Sumar el monto al total
                        totalMonto += monto;
                        // console.log("2. totalMonto: ", totalMonto, "  monto:", monto);
                        actualizarTotal();  // Actualizamos el label con el nuevo total
                        // }
                        monto = cantidad * costo;//entrada, se calcula el monto
                        agregarDetalle(codigo, cantidad, costo, monto);
                    }


                }
            }//fin if validarCampos
            else {
                mostrarMensaje('Complete todos los campos del encabezado antes de agregar un artículo', 'warning');
                return;
            }
        });
    });//**fin jquery

    //prueba
    // Función que formatea el número con separadores de miles y decimales
    function formatearNumero(numero) {
        return numero.toLocaleString('en-US', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 4  // Hasta 4 decimales
        });
    }

    // Función para formatear el número con separadores de miles y decimales
    function formatearNumeroConMiles(value) {
        // Parsear el valor limpio (sin comas) y formatearlo
        let num = parseFloat(value.replace(/,/g, ''));  // Eliminar comas para convertir a número
        if (isNaN(num)) return '';  // Si no es un número válido, retorna vacío

        // Formatear el número con separadores de miles y hasta 4 decimales
        return num.toLocaleString('en-US', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 4  // Hasta 4 decimales
        });
    }
    // Función para obtener el valor limpio del input (sin comas)
    function obtenerValorLimpio(input) {
        //  console.log("INPUT LIMPIAR: ", input)
        // return input.value.replace(/,/g, '');  // Eliminar comas del valor al obtenerlo
        return input.replace(',', '');
    }
    //fin prueba
    // Función para desactivar los campos del encabezado
    function desactivarEncabezado() {
        $('#txtNumDoc').prop('disabled', true);
        $('#txtProv').prop('disabled', true);
        //$("#txtProv").attr('disabled', true);
        $('#cbxTipoMov').prop('disabled', true);
        $('#txtMotivo').prop('disabled', true);
        $('#txtResponsable').prop('disabled', true);
        $('#cbxRestaurante').prop('disabled', true);
    }

    // Función para habilitar los campos del encabezado (si se elimina el último artículo)
    function habilitarEncabezado() {
        $('#txtNumDoc').prop('disabled', false);
        $('#txtProv').prop('disabled', false);
        $('#cbxTipoMov').prop('disabled', false);
        $('#txtMotivo').prop('disabled', false);
        $('#txtResponsable').prop('disabled', false);
        $('#cbxRestaurante').prop('disabled', false);
        $('#txtMotivo').removeClass('is-invalid');
    }

    function ValidarEncabezado() {
        var isValid = true;
        //validar para v2
        var num = $('#txtNumDoc').val();
        //var num2 = $('#txtProv').val();
        var num2 = $('#txtProv option:selected').text();
        var num3 = $('#cbxTipoMov').val();
        var num4 = $('#txtMotivo').val();
        //se agregan v3
        var num5 = $('#txtResponsable').val();
        var num6 = $('#cbxRestaurante').val();
        var errorMotivo = document.getElementById('errorMotivo');
        //if ($('#txtNumDoc').val() === '' || $('#txtProv').val() === '' || $('#cbxTipoMov').val() === '' || $('#txtMotivo').val() === '') {


        // Validar si los campos de encabezado están vacíos
        /*  if (!num || !num2 || !num3) {//|| !num4
              isValid = false;
          }
          var tipoFiltro = $("#cbxTipoMov").val();
          let listaTipoFiltro = tipoFiltro.split("-");
          if (listaTipoFiltro[0] === '3' && !num4) {//cuando sea salida debe validar el campo de motivo
              $('#txtMotivo').addClass('is-invalid'); // Marca el campo como inválido
              //$('</br> <span class="text-danger">El campo Motivo es obligatorio cuando es una Salida.</span>').insertAfter('#txtMotivo');
              errorMotivo.style.display = 'block'; // Mostrar mensaje de error
              isValid = false;
          } else {
              $('#txtMotivo').removeClass('is-invalid');
              errorMotivo.style.display = 'none'; // Ocultar mensaje de error si es válido
          }     */

        //validar para v3
        var tipoFiltro = $("#cbxTipoMov").val();
        let listaTipoFiltro = tipoFiltro.split("-");//categoria-tipomov
        switch (listaTipoFiltro[1]) {
            case "8"://compras
                if (!num || !num2 || !num3) {
                    isValid = false;
                }
                break;
            case "3": //traslado-entrada
                if (!num6 || !num3) {
                    isValid = false;
                }
                break;
            case "4"://traslado-salida
                if (!num6 || !num3 || !num4) {
                    isValid = false;
                }
                break;
            case "9"://desecho
                if (!num5 || !num3 || !num4) {
                    isValid = false;
                }
                break;
            default:
                isValid = false;
        }

        return isValid;
    }

    // Función para obtener el monto calculado desde la base de datos
    function obtenerMontoCalculado(codigoArticulo, cantidad, callback) {
        // Realizar una llamada AJAX para obtener el monto desde la base de datos
        $.ajax({
            //type: 'GET',
            type: 'POST',
            url: '/RegistroMov/CalcularMonto', // Endpoint en el servidor para calcular el monto
            data: { codigoArticulo: codigoArticulo, cantidad: cantidad },
            success: function (response) {
                // Suponiendo que 'response' contiene el costo y monto calculado
                callback(response.costo, response.monto);
            },
            error: function (error) {
                alert('Error al obtener el monto calculado.');
            }
        });
    }

    // Función para agregar el artículo al detalle
    function agregarDetalle(codigo, cantidad, costo, monto) {
        // Crear un objeto de detalle
        var detalle = {
            CodMateria: codigo,
            Cantidad: cantidad,
            Costo: costo,
            Monto: monto
        };

        // Agregar detalle a la lista de detalles
        detalles.push(detalle);

        // Actualizar la tabla en la vista
        actualizarTabla();

        // Limpiar los campos
        //  $('#txtCantidad').val('');
        //   $('#txtCosto').val('');
        $('#txtMotivo').removeClass('is-invalid');
        // Reiniciar selects a su estado predeterminado (eliminar selección)
        // $('#cbxArti').val('').trigger('change');
        //  $('#cbxArti').val(null).trigger('change');  // Restablecer el select usando Select2
        // Limpiar el select2 correctamente
        //  $('#cbxArti').val("0").trigger('change.select2');
        //  $('#cbxArti').parent().find('.select2-search__field').val('').trigger('change');
        //  $('#cbxArti').val(null).trigger('change');
        //  $("#cbxArti").val("");
        //  $('#cbxArti').val('');  // Restablece el select nativo
        //    $('#cbxArti').val(null).trigger('change.select2');  // Limpiar y notificar a Select2 del cambio
        //  console.log("COMBO: ",$('#cbxArti').val());  // Asegúrate de que el valor es null o vacío
        limpiarCamposArticulo();

        $('#txtCantidad').val('');        // Limpiar campo de cantidad
        $('#txtCosto').val('');           // Limpiar campo de costo
        // Desactivar los campos del encabezado
        desactivarEncabezado();
    }

    function actualizarTabla() {
        var tbody = $('#detalleArticulos tbody');
        tbody.empty(); // Limpiar la tabla
        //ToString("#,##0.00")
        // Recorrer la lista de detalles y agregar cada fila
        //v1 sin formato de miles y decimales
        /* $.each(detalles, function (index, detalle) {
             tbody.append(`
                             <tr>
                                 <td>${detalle.CodMateria}</td>
                                 <td>${detalle.Cantidad}</td>
                                 <td>${detalle.Costo}</td>
                                   <td>${detalle.Monto}</td>
                                 <td><button type="button" class="btn btn-primary" onclick="eliminarArticulo(${index})">Eliminar</button></td>
                             </tr>
                         `);
         });
         */
        $.each(detalles, function (index, detalle) {
            // Formatea el costo y el monto con separadores de miles y 4 decimales
            let costoFormateado = detalle.Costo.toLocaleString('en-US', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 4
            });

            let montoFormateado = detalle.Monto.toLocaleString('en-US', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 4
            });
            let contador = index + 1;
            tbody.append(`
                            <tr>
                                <td>${contador}</td>
                                <td>${detalle.CodMateria}</td>
                                <td>${detalle.Cantidad}</td>
                                <td>${costoFormateado}</td>
                                <td>${montoFormateado}</td>
                                <td><button type="button" class="btn btn-primary" onclick="eliminarArticulo(${index})">Eliminar</button></td>
                            </tr>
                        `);
        });

    }
    function eliminarArticulo(index) {
        // Obtener el monto del artículo antes de eliminarlo
        let montoEliminar = detalles[index].Monto;
        console.log("montoeliminar:", montoEliminar, " totalMonto:", totalMonto)
        // Restar el monto del total
        totalMonto -= montoEliminar;
        // console.log("montoeliminar:", montoEliminar, " totalMonto:", totalMonto)
        // Eliminar artículo de la lista
        detalles.splice(index, 1);
        actualizarTotal();
        actualizarTabla();
        // Si no hay más artículos, habilitar los campos del encabezado
        if (detalles.length === 0) {
            habilitarEncabezado();
        }
    }
    function limpiarCamposArticulo() {
        // Remover el valor seleccionado y restablecer Select2
        $('#cbxArti').val(null).trigger('change.select2');

        // O forzar el vaciado de las opciones seleccionadas
        //   $('#cbxArti').val('').empty();   // Vacía las opciones del select
        //  $('#cbxArti').select2({ data: [] });  // Reinicia el select2 si es necesario

        // Asegurarse de que el dropdown esté listo para seleccionar un nuevo artículo
        $('#cbxArti').append('<option value="" disabled selected>--Seleccione--</option>');

        // Actualiza visualmente el select con select2
        $('#cbxArti').trigger('change.select2');
    }
    // Función para actualizar el label con el total calculado
    function actualizarTotal() {
        // $('#totalMonto').text(totalMonto.toFixed(4));
        // Formatear el totalMonto con separadores de miles y 4 decimales
        let totalFormateado = totalMonto.toLocaleString('en-US', { //es- ES
            minimumFractionDigits: 2,
            maximumFractionDigits: 4
        });

        // console.log("Total Monto formateado: ", totalFormateado);  // Verificar que esté formateado correctamente
        $('#totalMonto').text(totalFormateado);  // Actualizar el span con el total formateado
    }
</script>

<style>
    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
        z-index: 9999; /* Asegura que el overlay esté encima de todo */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .spinner img {
        width: 100px; /* Tamaño del spinner */
        height: 100px;
    }
</style>



