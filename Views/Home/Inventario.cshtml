
@model List<InventarioArtMenores.Models.ArticuloViewModel>


@{
    ViewBag.Title = "Home Page";
}

<h3>Registro de Inventario</h3>

<!-- El formulario -->
<form id="ordenCompraForm" class="container mt-4">
    @{
        var numero = Session["NTF"]?.ToString(); /*ViewBag.NTF*/
        var descripcion = Session["desResArti"].ToString();
    }
    <label><strong style="font-size: 1.3em">@descripcion</strong></label>
    <hr />

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-primary alert-dismissible fade show" role="alert" style="width: fit-content;">
            <strong>@TempData["Message"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div id="overlay" style="display:none;">
        <div id="spinner" class="spinner">
            <img src="~/assets/img/loading.gif" alt="Cargando..." />
        </div>
    </div>

    @*@Html.Hidden("txtUrl", ViewBag.ProductId, new { @id = "txtUrl" })*@
    @*<input type="hidden" name="txtNum" value="@ViewBag.Num" />
        <input type="hidden" name="txCodR" value="@ViewBag.CodR" />*@

    @if (TempData["Abierto"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert" style="width: fit-content;">
            <strong>@TempData["Abierto"]</strong>
        </div>
        <input type="hidden" id="inAbierto" value="1" />
    }
    else
    {
        <div id="statusLabel" class="alert alert-info alert-dismissible fade show" role="alert" style="display: none; width: fit-content;">
            <strong>Inventario Abierto.</strong>
        </div>
    }

    @*<input type="text" id="categoriaFiltro" placeholder="Filtrar por Categoría" />*@
    <label>Número de TF: <strong style="font-size: 1.3em">@numero</strong></label>
    @*<div id="mensaje"><strong></strong></div>*@
    <br />
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Responsable del Conteo:</label>
            <input type="text" id="txtQuien" name="txtQuien" value="@ViewBag.txtResp" maxlength="100" class="form-control" required="required" />
        </div>
        <div class="col-md-3">
            <label>Cerrar Inventario:</label>
            <select id="cerrarFiltro" class="form-control" required="required">
                <option value="">---Seleccione---</option>
                <option value="5">Cerrar con ajuste</option>
                <option value="6">Cerrar sin ajuste</option>
            </select>
        </div>
        <div class="col-md-3">
            <p></p>
            <button id="btnCierre" class="btn btn-color text-white font-weight-bold" disabled>Cerrar Inventario</button>
            @*<button type="button" id="btnConteo2" class="btn btn-color text-white font-weight-bold">Mostrar Conteo</button>*@
        </div>
    </div>
    @*<div class="row mb-3">
        <p></p>
        <button type="button" id="btnConteo" class="btn btn-success" disabled>Mostrar Conteo</button>
    </div>*@
    @*<br />*@

    <div class="row mb-3">
        <div class="col-md-3">
            <label>Filtros:</label>
            <select id="estadoFiltro">
                <option value="0">Todos</option>
                <option value="1">Activos</option>
                <option value="2">Sin Conteo</option>
                <option value="3">Con Conteo</option>
                <option value="4">Con Diferencia</option>
                <option value="5">Falta Conteo</option>
                <option value="6">Contados</option>
            </select>
            <button type="button" id="filtrarBtn" class="btn btn-secondary">Filtrar</button>
        </div>
        <div class="col-md-3">
            <button type="button" id="btnConteo" class="btn btn-success" disabled>Mostrar Conteo</button>
        </div>
    </div>

</form>
    <!-- Contenedor para mostrar los mensajes de error -->
    @*<div id="error-message" style="color: red; display: none;"></div>*@
    <div id="error-message" class="alert alert-warning fade show" role="alert" style="display: none;"></div>
    <br />
    <!--<div class="table-responsive">-->
        @*<div id="jsGrid"></div>*@
        <!--<table id="jsGrid"></table>
    </div>-->
<div class="table-container" style="height: 600px;">
    <div id="jsGrid"></div>
</div>
    <br />
    <br />

    <!-- Botón para cerrar el inventario v1 -->
    @*<button id="btnCierre" class="btn btn-primary">Cerrar Inventario</button>*@


<script>

    $.noConflict();
    jQuery(document).ready(function ($) {
        let isFirstUpdate = true;  // Variable para controlar si es la primera actualización

        // Inicialmente, deshabilitamos el botón
        let isGridUpdated = false;  // Variable para controlar si hubo una actualización en jsGrid

        let isConteo = false;
        // Inicialmente verificamos el valor de TempData["Abierto"]
        checkConditions();


       // $("#jsGrid").hideCol("NumTF");
        $("#jsGrid").jsGrid({
            //width: "100%",
            //height: "600px",
            width: "100%",
            height: "600px", //"auto",

            filtering: true,  // Habilitar el filtrado
            inserting: false,
            editing: true,// Permitir la edición directa en la tabla
            sorting: true,
            // paging: true,
            autoload: true,
            // viewrecords: true, // Muestra el número de registros
            rownumbers: true,
            rownumWidth: 40, // Ajusta el ancho de la columna de números de fila

            // datatype: 'local', // Temporalmente 'local' para cargar los datos manualmente v3

            pageSize: 20,//cuantos por página
            pageButtonCount: 20,//cuantas lineas se ven sin scroll
            shrinkToFit: true, // Asegura que las columnas encajen en el espacio disponible

            // deleteConfirm: "¿Está seguro de que desea eliminar este artículo menor?",
            // Intercepta el evento de validación fallida para deshabilitar el alert predeterminado
            invalidNotify: function (args) {
                // Prevenir el comportamiento predeterminado del alert
                args.preventDefault();

                // Mostrar el mensaje de error en el contenedor personalizado
                $("#error-message")
                    .text(args.errors[0].message)  // Mostrar el mensaje del primer error
                    .show();
            },

            controller: {
                loadData: function (filter) {

                    // Obtiene el valor del input externo
                    var estadoFiltro = $("#estadoFiltro").val();
                    // Añade los filtros al objeto de filtro
                    filter.Estado = estadoFiltro;
                    return $.ajax({
                        type: "GET",
                        url: '@Url.Action("ObtenerArticulos", "Home")',
                        data: filter, // Pasa los filtros al servidor
                        dataType: "json"
                    });

                },
                updateItem: function (item) {
                    console.log("Item actualizado:", item);
                    var txtQuienRes = $("#txtQuien").val();
                    return $.ajax({
                        type: "POST",
                        url: '@Url.Action("ActualizarArticulos", "Home")',
                        //data: item,
                        data: $.extend(item, {
                            txtQuien: txtQuienRes
                        }),
                        dataType: "json",
                        success: function (response) {
                            if (response.success) {
                                // Mostrar el label "Iniciado" solo la primera vez
                                if (isFirstUpdate) {
                                    $("#statusLabel").show();  // Mostrar el label
                                    isFirstUpdate = false;  // Marcar que ya se realizó la primera actualización
                                    //v2 habilitar btn
                                    // console.log("Item actualizado:", item);
                                    isGridUpdated = true;  // Marcar que el jsGrid ha sido actualizado
                                    checkConditions();     // Verificar las condiciones para habilitar el botón
                                    //fin v2
                                }                
                                // Recargar la tabla
                                $("#jsGrid").jsGrid("loadData");
                            } else {
                                alert("No se pudo actualizar el artículo menor");
                            }
                        },
                        error: function () {
                            alert("Error al actualizar el artículo menor");
                        }
                    });
                }

            },
            fields: [
                {
                    title: "#",
                    itemTemplate: function (_, item) {
                        var index = $.inArray(item, $("#jsGrid").jsGrid("option", "data"));
                        return index + 1;
                    },
                    width: 30,
                    align: "center",
                    width: 50
                },
                /*      { name: "CodMateria", type: "text", width: 60, title: "Código", readOnly: true, align: "left"*//*, filtering: true *//*},*/
                {
                    name: "CodMateria",
                    type: "text",
                    width: 60,
                    title: "Código",
                    align: "left",
                    readOnly: true,
                    width: 100,
                    // Personalización del campo de filtrado manteniendo el ícono de lupa y comportamiento predeterminado
                    filterTemplate: function () {
                        var $input = this._filterInput = $("<input>").attr("type", "text")
                            .addClass("jsgrid-filter-input");  // Añadir clase predeterminada para estilo

                        return $input;
                    },
                    filterValue: function () {
                        return this._filterInput.val();
                    }
                },
                /* { name: "NomMateria", type: "text", width: 150, title: "Artículo", readOnly: true, align: "left" },*/
                {
                    name: "NomMateria",
                    type: "text",
                    width: 200,
                    title: "Artículo",
                    align: "left",
                    // width: auto,
                    readOnly: true,
                    // Personalización del campo de filtrado manteniendo el ícono de lupa y comportamiento predeterminado
                    filterTemplate: function () {
                        var $input = this._filterInput = $("<input>").attr("type", "text")
                            .addClass("jsgrid-filter-input");  // Añadir clase predeterminada para estilo

                        return $input;
                    },
                    filterValue: function () {
                        return this._filterInput.val();
                    }
                },
                { name: "Factor", type: "number", title: "Factor", readOnly: true, align: "right", filtering: false, width: 100, visible: false },
                 { name: "Teorico", type: "number", title: "Teórico", readOnly: true, align: "right", filtering: false, width: 100, visible: false },
                 {
                     name: "Fisico", type: "number", title: "Físico", align: "right", filtering: false, width: 100,
                     validate: {
                         message: "Debe ser un número entero positivo o 0",
                         validator: function (value) {
                             if (!Number.isInteger(value) || value < 0) {
                                 // Mostrar el mensaje de error en el contenedor
                                 $("#error-message").text("El valor debe ser un número entero positivo").show();
                                 mostrarMensaje();
                                 return false;  // Indicar que la validación falló
                             }
                             // Ocultar el mensaje de error si es válido
                             $("#error-message").hide();
                             return true;  // Indicar que la validación fue exitosa
                         }
                     }
                     //,
                     //itemTemplate: function (value, item) {
                     //    // Crear un input para editar el campo de "Numero"
                     //    var input = $("<input>").attr("type", "number").val(value);

                     //    // Detectar si se presiona la tecla Enter en el campo "Numero"
                     //    input.on("keydown", function (e) {
                     //        if (e.which === 13) {  // Código de tecla Enter (13)
                     //            // Actualizar el valor de la fila actual
                     //            item.Numero = parseInt(input.val(), 10);

                     //            // Actualizar la fila en jsGrid
                     //            $("#jsGrid").jsGrid("updateItem", item);
                     //        }
                     //    });

                     //    return input;
                     //}

                     //v1 con alert
                     //validate: {
                     //    message: "El valor debe ser un número positivo",
                     //    validator: function (value) {
                     //        //return value > 0;  // Validar que el valor sea mayor que 0
                     //        return Number.isInteger(value) && value >= 0; // Acepta solo enteros mayores o iguales a 0
                     //    }
                     //}
                     /*,
                     // Evento cuando se edita la celda
                     itemTemplate: function (value, item) {
                         var input = $("<input>").attr("type", "number").val(value);

                         // Detecta cuando se presiona Enter
                         input.on("keydown", function (e) {
                             if (e.which === 13) {  // 13 es el código de la tecla Enter
                                 // Actualizar el valor en la fila actual
                                 item.Numero = parseInt(input.val());

                                 // Actualiza el ítem (dispara la acción de updateItem)
                                 $("#jsGrid").jsGrid("updateItem", item);
                             }
                         });

                         return input;
                     }*/
                 },
                { name: "Diferencia", type: "number", width: 50, title: "Diferencia", readOnly: true, align: "right", filtering: false, width: 100, visible: false },
                /* { name: "NumTF", type: "number", width: 50, title: "NumTF", hidden: true, editable: false, editrules: { edithidden: false }, hidedlg: true },//prueba*/
                 { type: "control", width: 50, editButton: true, deleteButton: false }
                 // { label: 'Precio', name: 'precio', width: 100, formatter: 'currency', formatoptions: { prefix: '$' } },

             ]
             ,
             onItemEditing: function (args) {
                 // Detectar el evento keydown en los campos editables cuando una fila entra en modo edición
                 setTimeout(function () {
                     $(".jsgrid-edit-row input").off("keydown").on("keydown", function (e) {
                         if (e.key === "Enter") {  // Detectar si se presionó Enter (en lugar de keyCode)
                             e.preventDefault();  // Prevenir el comportamiento predeterminado

                             console.log("Se presionó Enter");
                             // Llamar a la función de finalizar edición
                             //  $("#jsGrid").jsGrid("updateItem", args.item);  // Actualizar la fila editada //envía datos con fisico 0

                             //funcionó con la siguiente:
                             // Obtener el item que está siendo editado en la fila actual
                             // Obtener el item actualizado de la fila en edición usando closest
                             var item = $(this).closest(".jsgrid-edit-row").data("JSGridItem");
                             console.log("Item actualizado con datos nuevos:", item);
                             // Llamar a la función de finalizar edición con los datos correctos
                             $("#jsGrid").jsGrid("updateItem", item);  // Actualizar la fila editada

                             //trae el dato como Fisico:NaN así que no sabe q valor se ingresó
                             /*console.log("Fila capturada:", args);
                             // Obtener el valor actualizado del campo desde el input
                             var updatedFisico = parseFloat($(".jsgrid-edit-row input[name='Fisico']").val());
                            // var updatedCantidad = parseInt($(".jsgrid-edit-row input[name='Cantidad']").val(), 10);

                             // Asignar los valores actualizados al item actual
                             args.item.Fisico = updatedFisico;
                             //args.item.Cantidad = updatedCantidad;

                             // Llamar a la función de finalizar edición
                             $("#jsGrid").jsGrid("updateItem", args.item);  // Actualizar la fila editada
                             */
                         }
                     });
                 }, 100);  // Usar setTimeout para asegurarse de que el DOM está listo
             }
             //onItemEditing: function (args) {
             //    // Este evento se dispara cuando una fila entra en modo de edición

             //    // Detectar el evento keydown en los campos editables
             //    $(".jsgrid-edit-row input").off("keydown").on("keydown", function (e) {
             //        if (e.which === 13) {  // Detectar si se presionó Enter (código de tecla 13)
             //            e.preventDefault();  // Prevenir el comportamiento predeterminado

             //            console.log("Se presionó Enter");
             //            // Llamar a la función de finalizar edición
             //            $("#jsGrid").jsGrid("updateItem", args.item);  // Actualizar la fila editada
             //        }
             //    });
             //}

             //onRefreshed: function () {
             //    // Capturar el evento keydown después de que la tabla se refresca
             //    $(".jsgrid-edit-row input").off("keydown").on("keydown", function (e) {
             //        if (e.which === 13) {  // Detectar si se presionó Enter (código de tecla 13)
             //            e.preventDefault();  // Prevenir el comportamiento predeterminado
             //            console.log("Se presionó Enter");

             //            // Obtener el item que está siendo editado en la fila actual
             //            var item = $(this).closest(".jsgrid-edit-row").data("JSGridItem");
             //            $("#jsGrid").jsGrid("updateItem", item);  // Actualizar la fila
             //        }
             //    });
             //}

             //onItemEditing: function (args) {
             //    // Detectar cuando el usuario está en modo de edición
             //    $(".jsgrid-edit-row input").on("keydown", function (e) { //jsgrid-cell
             //        console.log("Entro.. ",e.which);
             //        if (e.which === 13) {  // Detectar si se presionó Enter (código de tecla 13)
             //            e.preventDefault();  // Evitar que se ejecute el comportamiento predeterminado
             //            console.log("Actualizando fila:", args.item);
             //            $("#jsGrid").jsGrid("updateItem", args.item);  // Finalizar la edición y actualizar
             //        }
             //    });
             //}
             //rowClick: function (args) {
             //    // Activa la edición cuando se hace clic en la fila
             //    this.editItem(args.item);

             //    // Detectar el Enter en los campos de la fila editable
             //    $(".jsgrid-edit-row input").on("keydown", function (e) {
             //        if (e.which === 13) {  // Código de tecla Enter (13)
             //            e.preventDefault();
             //            // Simular clic en el botón de check (guardar cambios)
             //            $("#jsGrid").jsGrid("updateItem", args.item);
             //        }
             //    });
             //}
         });

        // Función para habilitar/deshabilitar el botón de envío
        function checkConditions() {
            // Verificamos si el valor del input hidden es 1
            const isAbierto = $("#inAbierto").val() === "1";
            console.log("isGridUpdated: ", isGridUpdated);
            console.log("isAbierto: ", isAbierto, " val:", $("#inAbierto").val());
            // Habilitamos el botón solo si ambas condiciones se cumplen
            if (isAbierto || isGridUpdated) {
                $("#btnCierre").prop("disabled", false);  // Habilitar el botón
                $("#btnConteo").prop("disabled", false);  // Habilitar el botón
            } else {
                $("#btnCierre").prop("disabled", true);   // Deshabilitar el botón
                $("#btnConteo").prop("disabled", true);   // Deshabilitar el botón
            }
        }

        // Botón para aplicar el filtro
        $("#filtrarBtn").on("click", function () {
           // e.preventDefault();
            isGridUpdated = false;   // Reiniciar el estado de actualización del grid //new
            $("#jsGrid").jsGrid("loadData"); // Recarga los datos con los nuevos filtros
            checkConditions();       // Verificar las condiciones nuevamente //new
        });


        // También podemos monitorear manualmente cualquier cambio en #inAbierto y volver a verificar las condiciones //new
        $("#inAbierto").on("change", function () {
            checkConditions();
        });

        ////v1 sin tipo
        //$("#btnCierre").on("click", function () {
        //    // Obtener todos los datos de la tabla
        //    var allData = $("#jsGrid").jsGrid("option", "data");
        //    //var dat2 = JSON.stringify(allData);
        //     //   console.log("JSON serialized jqGrid data:\n" + dat2);
        //    // Aquí puedes hacer algo con todos los datos, por ejemplo, enviarlos al servidor
        //    $.ajax({
        //        type: "POST",
        //         url: "/Home/CerrarInventario",
        //       // data: JSON.stringify(allData),  // Envía todos los datos como JSON
        //       // contentType: "application/json",
        //        success: function (response) {
        //            alert("Datos procesados exitosamente.");
        //            // $("#jsGrid").jsGrid("loadData"); // Recarga los datos con los nuevos filtros
        //            // Redirige a la misma vista de Index
        //            window.location.href = "/Home/Index";
        //        },
        //        error: function (jqXHR, textStatus, errorThrown) {
        //            alert("Error al procesar los datos: " + errorThrown);
        //            console.log(jqXHR.responseText);  // Muestra la respuesta del servidor para más detalles
        //        }
        //    });
        //});

                //******************* boton de cancelar ******************************** */
        $('#btnCierre').on('click', function (e) { //btnConteo

            // Evitar que el formulario se envíe inmediatamente
            e.preventDefault();
            // Validar campos requeridos
            var isValid = true;
            var cerrarFiltro = $("#cerrarFiltro").val();
            var quien = $("#txtQuien").val();
            // var cancelarFiltro = document.getElementById("cancelarFiltro").value;
            if (cerrarFiltro === "") {
                // alert("Por favor, selecciona una opción antes de cancelar.");
                // e.preventDefault(); // Evita el envío del formulario
                $('#cerrarFiltro').addClass('is-invalid'); // Marca el campo como inválido
                $('</br> <span class="text-danger">Por favor, selecciona una opción para cerrar el inventario.</span>').insertAfter('#cerrarFiltro');
                isValid = false;
            }
            if (quien === "") {
                $('#txtQuien').addClass('is-invalid'); // Marca el campo como inválido
                $('</br> <span class="text-danger">Por favor, Ingrese el Responsable.</span>').insertAfter('#txtQuien');
                isValid = false;
            }
            if (isValid){
                $('#btnCierre').prop('disabled', true);
                // Mostrar el overlay y el spinner
                $("#overlay").show();
                // Hacer una llamada Ajax para realizar la acción sin recargar la página
                $.ajax({
                    url: '@Url.Action("CerrarInventario", "Home")',
                    type: 'POST',
                    data: { tipo: cerrarFiltro, txtQuien:quien },
                    success: function (result) {
                        isFirstUpdate = true;  // Restablecer la variable de control
                        $("#statusLabel").hide();  // Ocultar el label
                        // Manejar el resultado del servidor
                        //alert('Elemento eliminado con éxito');
                        // Cerrar el modal
                       // $('#confirmModal').modal('hide');
                        // Redirigir o actualizar la página según sea necesario
                        window.location.href = "/Home/Inventario";
                    },
                    error: function (err) {
                        $("#overlay").hide();
                        alert('Ocurrió un error. Inténtalo de nuevo.');
                    },
                    complete: function () {
                        // Ocultar el overlay y el spinner cuando la solicitud termine
                        $("#overlay").hide();
                    }
                });
            }
            });

        // Manejar el clic en el botón "Conteo"
        $("#btnConteo").on("click", function () {
            // Supongamos que quieres mostrar la columna "Conteo" al hacer clic
            var columnIsVisible = $("#jsGrid").jsGrid("fieldOption", "Teorico", "visible");
            var columnIsVisible = $("#jsGrid").jsGrid("fieldOption", "Diferencia", "visible");
            //var columnIsVisible = $("#jsGrid").jsGrid("fieldOption", "Teorico", "visible");

            // Si la columna "Conteo" está oculta, la mostramos; de lo contrario, la ocultamos
            if (!columnIsVisible) {
                $("#jsGrid").jsGrid("fieldOption", "Teorico", "visible", true);  // Mostrar la columna
                $("#jsGrid").jsGrid("fieldOption", "Diferencia", "visible", true);  // Mostrar la columna
            }
            /*else {
                $("#jsGrid").jsGrid("fieldOption", "Teorico", "visible", false);  // Ocultar la columna
            }*/

            // Refrescar la tabla para aplicar los cambios
             $("#jsGrid").jsGrid("refresh");

            // Definir un filtro de ejemplo: Monto mínimo
          /*  var filtro = {
               cosa= $("#estadoFiltro").val("6")
            };

            // Recargar la tabla con el filtro aplicado
            $("#jsGrid").jsGrid("loadData", filtro);*/
            $("#estadoFiltro").val("6");
            $("#jsGrid").jsGrid("loadData");
        });


        // Manejo del botón que procesa todos los datos
        //$("#processButton").on("click", function () {
        //    var allData = $("#jsGrid").jsGrid("option", "data");
        //    // Aquí puedes hacer algo con todos los datos, por ejemplo, enviarlos al servidor
        //    $.ajax({
        //        type: "POST",
        //        url: "/Home/ProcesarTodosLosDatos",
        //        data: JSON.stringify(allData),  // Envía todos los datos como JSON
        //        contentType: "application/json",
        //        success: function (response) {
        //            alert("Datos procesados exitosamente.");
        //        },
        //        error: function () {
        //            alert("Error al procesar los datos.");
        //        }
        //    });
        //});


    });

    // Función para mostrar mensajes personalizados en el div de alerta
    function mostrarMensaje() {
        // Asegurarse de que la alerta se oculta automáticamente después de 5 segundos
        setTimeout(function () {
            $('#error-message').fadeOut();
        }, 5000); // 5000 milisegundos = 5 segundos
    }


</script>
    <style>
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
            z-index: 9999; /* Asegura que el overlay esté encima de todo */
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .spinner img {
            width: 100px; /* Tamaño del spinner */
            height: 100px;
        }

        #error-message {
            /*color: black;*/
            font-weight: bold;
            margin-bottom: 10px;
        }

        /* Asegura que el grid se comporte correctamente dentro del contenedor de desplazamiento */
        .table-responsive {
            overflow-x: auto; /* Permitir scroll horizontal en pantallas pequeñas */
        }
        /*nota: hay estilos en el site.css */


    </style>
